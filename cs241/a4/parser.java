
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Sun Nov 13 23:43:32 EST 2005
//----------------------------------------------------

import java.util.*;

/** CUP v0.10j generated parser.
  * @version Sun Nov 13 23:43:32 EST 2005
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\010\004\000\002\010\004\000\002\035\005" +
    "\000\002\035\004\000\002\046\004\000\002\046\003\000" +
    "\002\047\004\000\002\047\003\000\002\006\005\000\002" +
    "\006\004\000\002\007\005\000\002\007\004\000\002\012" +
    "\007\000\002\012\010\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\022\003\000\002\023\004\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\005\000\002\050" +
    "\004\000\002\050\003\000\002\050\003\000\002\027\004" +
    "\000\002\027\003\000\002\030\003\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\003\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\031\005\000\002\031\003" +
    "\000\002\032\004\000\002\032\005\000\002\032\004\000" +
    "\002\032\005\000\002\025\011\000\002\025\010\000\002" +
    "\036\005\000\002\037\005\000\002\040\005\000\002\041" +
    "\007\000\002\042\010\000\002\043\010\000\002\043\007" +
    "\000\002\044\004\000\002\044\003\000\002\045\006\000" +
    "\002\045\002\000\002\026\006\000\002\026\005\000\002" +
    "\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\027\011\041\004\001\002\000\004\005" +
    "\041\001\002\000\004\002\040\001\002\000\006\027\ufff9" +
    "\041\ufff9\001\002\000\006\027\011\041\004\001\002\000" +
    "\006\002\ufff7\041\ufff7\001\002\000\006\007\015\041\014" +
    "\001\002\000\006\002\uffff\041\004\001\002\000\006\002" +
    "\ufff8\041\ufff8\001\002\000\004\007\033\001\002\000\010" +
    "\027\011\031\022\041\016\001\002\000\004\041\032\001" +
    "\002\000\012\010\uffed\027\uffed\031\uffed\041\uffed\001\002" +
    "\000\004\004\031\001\002\000\012\010\uffef\027\uffef\031" +
    "\uffef\041\uffef\001\002\000\004\041\030\001\002\000\012" +
    "\010\024\027\011\031\022\041\016\001\002\000\004\041" +
    "\026\001\002\000\012\010\ufff0\027\ufff0\031\ufff0\041\ufff0" +
    "\001\002\000\004\004\027\001\002\000\036\005\ufff1\010" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\027\ufff1\031\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001" +
    "\002\000\004\004\ufffe\001\002\000\012\010\uffee\027\uffee" +
    "\031\uffee\041\uffee\001\002\000\004\004\ufffd\001\002\000" +
    "\010\027\011\031\022\041\016\001\002\000\012\010\035" +
    "\027\011\031\022\041\016\001\002\000\036\005\ufff2\010" +
    "\ufff2\013\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\027\ufff2\031\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001" +
    "\002\000\006\027\ufffa\041\ufffa\001\002\000\006\002\001" +
    "\041\004\001\002\000\004\002\000\001\002\000\010\006" +
    "\044\031\046\041\042\001\002\000\006\012\164\041\165" +
    "\001\002\000\006\006\235\011\234\001\002\000\004\007" +
    "\052\001\002\000\006\006\uffc8\011\uffc8\001\002\000\006" +
    "\012\050\041\047\001\002\000\006\006\uffc7\011\uffc7\001" +
    "\002\000\004\041\051\001\002\000\006\006\uffc6\011\uffc6" +
    "\001\002\000\034\005\076\013\060\015\061\016\064\021" +
    "\055\022\057\023\105\027\011\031\073\036\054\037\056" +
    "\040\102\041\067\001\002\000\010\004\231\014\140\026" +
    "\232\001\002\000\032\004\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\014\uffdd\026\uffdd\030\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\001\002\000\016\005\076\013\060\036\054" +
    "\037\056\040\102\041\116\001\002\000\032\004\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\012\uffdc\014\uffdc\026\uffdc\030\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\001\002\000\004\024" +
    "\223\001\002\000\014\005\076\036\054\037\056\040\102" +
    "\041\116\001\002\000\004\004\221\001\002\000\034\005" +
    "\uffd4\010\uffd4\013\uffd4\015\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\027\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\001" +
    "\002\000\034\005\uffcd\010\uffcd\013\uffcd\015\uffcd\016\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\027\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\001\002\000\016\005\076\013\060\036\054" +
    "\037\056\040\102\041\116\001\002\000\036\005\076\010" +
    "\uffd6\013\060\015\061\016\064\021\055\022\057\023\105" +
    "\027\011\031\073\036\054\037\056\040\102\041\067\001" +
    "\002\000\004\004\167\001\002\000\026\004\uffda\005\154" +
    "\012\uffda\014\uffda\026\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\001\002\000\004\004\153\001\002\000\034" +
    "\005\076\010\uffd7\013\060\015\061\016\064\021\055\022" +
    "\057\023\105\027\011\036\054\037\056\040\102\041\067" +
    "\001\002\000\004\004\151\001\002\000\004\041\144\001" +
    "\002\000\004\004\143\001\002\000\004\004\142\001\002" +
    "\000\016\005\076\013\060\036\054\037\056\040\102\041" +
    "\116\001\002\000\004\010\135\001\002\000\004\004\134" +
    "\001\002\000\032\004\uffde\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\014\uffde\026\uffde\030\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\001\002\000\032\004\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\014\uffdb\026\uffdb\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\001\002\000\030\004\uffe1\006\uffe1\007" +
    "\uffe1\012\uffe1\014\uffe1\026\uffe1\030\127\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\001\002\000\026\004\uffe3\006\uffe3\007" +
    "\uffe3\012\uffe3\014\uffe3\026\uffe3\032\125\033\uffe3\034\uffe3" +
    "\035\uffe3\001\002\000\004\025\132\001\002\000\024\004" +
    "\uffe5\006\uffe5\007\uffe5\012\uffe5\014\uffe5\026\uffe5\033\123" +
    "\034\uffe5\035\uffe5\001\002\000\022\004\uffe7\006\uffe7\007" +
    "\uffe7\012\uffe7\014\uffe7\026\uffe7\034\121\035\uffe7\001\002" +
    "\000\004\004\131\001\002\000\020\004\uffe9\006\uffe9\007" +
    "\uffe9\012\uffe9\014\uffe9\026\uffe9\035\117\001\002\000\016" +
    "\004\uffeb\006\uffeb\007\uffeb\012\114\014\uffeb\026\uffeb\001" +
    "\002\000\034\005\uffd3\010\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\027\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\001\002\000\016\005\076\013\060\036\054" +
    "\037\056\040\102\041\116\001\002\000\020\004\uffea\006" +
    "\uffea\007\uffea\012\uffea\014\uffea\026\uffea\035\117\001\002" +
    "\000\032\004\uffda\006\uffda\007\uffda\011\uffda\012\uffda\014" +
    "\uffda\026\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\001\002\000\016\005\076\013\060\036\054\037\056\040" +
    "\102\041\116\001\002\000\022\004\uffe8\006\uffe8\007\uffe8" +
    "\012\uffe8\014\uffe8\026\uffe8\034\121\035\uffe8\001\002\000" +
    "\016\005\076\013\060\036\054\037\056\040\102\041\116" +
    "\001\002\000\024\004\uffe6\006\uffe6\007\uffe6\012\uffe6\014" +
    "\uffe6\026\uffe6\033\123\034\uffe6\035\uffe6\001\002\000\016" +
    "\005\076\013\060\036\054\037\056\040\102\041\116\001" +
    "\002\000\026\004\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4" +
    "\026\uffe4\032\125\033\uffe4\034\uffe4\035\uffe4\001\002\000" +
    "\016\005\076\013\060\036\054\037\056\040\102\041\116" +
    "\001\002\000\030\004\uffe2\006\uffe2\007\uffe2\012\uffe2\014" +
    "\uffe2\026\uffe2\030\127\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\001\002\000\014\005\076\036\054\037\056\040\102\041" +
    "\116\001\002\000\032\004\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\014\uffdf\026\uffdf\030\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\001\002\000\036\005\ufffb\010\ufffb\013\ufffb" +
    "\015\ufffb\016\ufffb\021\ufffb\022\ufffb\023\ufffb\027\ufffb\031" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000\016" +
    "\005\076\013\060\036\054\037\056\040\102\041\116\001" +
    "\002\000\006\004\uffc0\030\127\001\002\000\034\005\uffcf" +
    "\010\uffcf\013\uffcf\015\uffcf\016\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\027\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002" +
    "\000\036\002\uffc2\005\uffc2\010\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\001\002\000\006\006\137\014\140\001" +
    "\002\000\032\004\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\014\uffd9\026\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\001\002\000\016\005\076\013\060\036\054\037\056" +
    "\040\102\041\116\001\002\000\016\004\uffec\006\uffec\007" +
    "\uffec\012\114\014\uffec\026\uffec\001\002\000\034\005\uffce" +
    "\010\uffce\013\uffce\015\uffce\016\uffce\021\uffce\022\uffce\023" +
    "\uffce\027\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001\002" +
    "\000\034\005\uffcb\010\uffcb\013\uffcb\015\uffcb\016\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\027\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\001\002\000\006\004\ufff5\011\145\001\002\000" +
    "\004\041\147\001\002\000\004\004\ufff6\001\002\000\006" +
    "\004\ufff3\011\145\001\002\000\004\004\ufff4\001\002\000" +
    "\034\005\uffd1\010\uffd1\013\uffd1\015\uffd1\016\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\027\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\001\002\000\034\005\uffd5\010\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\021\uffd5\022\uffd5\023\uffd5\027\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\001\002\000\034\005\uffcc\010\uffcc" +
    "\013\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\023\uffcc\027" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\001\002\000\022" +
    "\005\076\006\157\013\060\031\046\036\054\037\056\040" +
    "\102\041\156\001\002\000\010\006\uffb3\011\uffb3\030\127" +
    "\001\002\000\014\006\uffda\011\uffda\012\164\030\uffda\041" +
    "\165\001\002\000\006\004\uffb5\007\052\001\002\000\006" +
    "\006\162\011\161\001\002\000\016\005\076\013\060\036" +
    "\054\037\056\040\102\041\116\001\002\000\004\004\uffb6" +
    "\001\002\000\010\006\uffb4\011\uffb4\030\127\001\002\000" +
    "\004\041\166\001\002\000\006\006\uffc5\011\uffc5\001\002" +
    "\000\006\006\uffc4\011\uffc4\001\002\000\034\005\uffd0\010" +
    "\uffd0\013\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\027\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000" +
    "\034\005\076\010\uffd8\013\060\015\061\016\064\021\055" +
    "\022\057\023\105\027\011\036\054\037\056\040\102\041" +
    "\067\001\002\000\004\004\172\001\002\000\036\005\ufffc" +
    "\010\ufffc\013\ufffc\015\ufffc\016\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\027\ufffc\031\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\001\002\000\006\007\174\014\140\001\002\000\032\005" +
    "\076\013\060\015\061\016\064\021\055\022\057\023\105" +
    "\027\011\036\054\037\056\040\102\041\067\001\002\000" +
    "\034\005\076\010\176\013\060\015\061\016\064\021\055" +
    "\022\057\023\105\027\011\036\054\037\056\040\102\041" +
    "\067\001\002\000\010\004\uffb7\017\177\020\200\001\002" +
    "\000\016\005\076\013\060\036\054\037\056\040\102\041" +
    "\116\001\002\000\004\007\212\001\002\000\004\004\uffbd" +
    "\001\002\000\010\004\uffb7\017\204\020\200\001\002\000" +
    "\004\004\uffb9\001\002\000\016\005\076\013\060\036\054" +
    "\037\056\040\102\041\116\001\002\000\004\004\uffba\001" +
    "\002\000\006\007\207\014\140\001\002\000\032\005\076" +
    "\013\060\015\061\016\064\021\055\022\057\023\105\027" +
    "\011\036\054\037\056\040\102\041\067\001\002\000\034" +
    "\005\076\010\211\013\060\015\061\016\064\021\055\022" +
    "\057\023\105\027\011\036\054\037\056\040\102\041\067" +
    "\001\002\000\010\004\uffbc\017\uffbc\020\uffbc\001\002\000" +
    "\032\005\076\013\060\015\061\016\064\021\055\022\057" +
    "\023\105\027\011\036\054\037\056\040\102\041\067\001" +
    "\002\000\034\005\076\010\214\013\060\015\061\016\064" +
    "\021\055\022\057\023\105\027\011\036\054\037\056\040" +
    "\102\041\067\001\002\000\004\004\uffb8\001\002\000\006" +
    "\007\216\014\140\001\002\000\032\005\076\013\060\015" +
    "\061\016\064\021\055\022\057\023\105\027\011\036\054" +
    "\037\056\040\102\041\067\001\002\000\034\005\076\010" +
    "\220\013\060\015\061\016\064\021\055\022\057\023\105" +
    "\027\011\036\054\037\056\040\102\041\067\001\002\000" +
    "\010\004\uffbb\017\uffbb\020\uffbb\001\002\000\034\005\uffca" +
    "\010\uffca\013\uffca\015\uffca\016\uffca\021\uffca\022\uffca\023" +
    "\uffca\027\uffca\036\uffca\037\uffca\040\uffca\041\uffca\001\002" +
    "\000\032\004\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\014" +
    "\uffe0\026\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\001\002\000\016\005\076\013\060\036\054\037\056\040" +
    "\102\041\116\001\002\000\006\004\uffc1\014\140\001\002" +
    "\000\006\007\226\014\140\001\002\000\032\005\076\013" +
    "\060\015\061\016\064\021\055\022\057\023\105\027\011" +
    "\036\054\037\056\040\102\041\067\001\002\000\034\005" +
    "\076\010\230\013\060\015\061\016\064\021\055\022\057" +
    "\023\105\027\011\036\054\037\056\040\102\041\067\001" +
    "\002\000\004\004\uffbe\001\002\000\034\005\uffd2\010\uffd2" +
    "\013\uffd2\015\uffd2\016\uffd2\021\uffd2\022\uffd2\023\uffd2\027" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002\000\016" +
    "\005\076\013\060\036\054\037\056\040\102\041\116\001" +
    "\002\000\006\004\uffbf\014\140\001\002\000\006\031\046" +
    "\041\042\001\002\000\004\007\236\001\002\000\034\005" +
    "\076\013\060\015\061\016\064\021\055\022\057\023\105" +
    "\027\011\031\073\036\054\037\056\040\102\041\067\001" +
    "\002\000\004\010\240\001\002\000\036\002\uffc3\005\uffc3" +
    "\010\uffc3\013\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\027\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002" +
    "\000\006\006\uffc9\011\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\014\003\004\012\005\025\007\046\006\047" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\035\025\007\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\022\005" +
    "\020\010\017\012\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\024\010\017\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\033\005\020\010\017\012\016\001\001\000" +
    "\010\005\024\010\017\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\012\001\001\000\002\001" +
    "\001\000\006\031\042\032\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\107\012\112\015\052\016\111\017" +
    "\110\020\106\021\105\022\103\023\102\024\100\025\062" +
    "\026\067\027\070\030\061\035\064\036\071\037\065\040" +
    "\077\041\074\042\073\050\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\224\016\111\017\110\020" +
    "\106\021\105\022\103\023\102\024\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\172\016\111\017\110\020\106\021\105\022\103\023" +
    "\102\024\100\001\001\000\050\006\170\012\112\015\052" +
    "\016\111\017\110\020\106\021\105\022\103\023\102\024" +
    "\100\025\062\026\067\027\167\030\061\036\071\037\065" +
    "\040\077\041\074\042\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\012\112\015\052" +
    "\016\111\017\110\020\106\021\105\022\103\023\102\024" +
    "\100\025\062\026\067\030\151\036\071\037\065\040\077" +
    "\041\074\042\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\135" +
    "\016\111\017\110\020\106\021\105\022\103\023\102\024" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\114\020\106\021\105\022\103" +
    "\023\102\024\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\117\021\105\022\103\023\102\024\100" +
    "\001\001\000\002\001\001\000\012\021\121\022\103\023" +
    "\102\024\100\001\001\000\002\001\001\000\010\022\123" +
    "\023\102\024\100\001\001\000\002\001\001\000\006\023" +
    "\125\024\100\001\001\000\002\001\001\000\004\024\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\132\024\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\140\017\110\020\106\021\105\022\103\023\102" +
    "\024\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\154\024\100\031\042\032\044\033\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\162\024\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\012" +
    "\112\015\052\016\111\017\110\020\106\021\105\022\103" +
    "\023\102\024\100\025\062\026\067\030\151\036\071\037" +
    "\065\040\077\041\074\042\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\012\112\015" +
    "\052\016\111\017\110\020\106\021\105\022\103\023\102" +
    "\024\100\025\062\026\067\027\174\030\061\036\071\037" +
    "\065\040\077\041\074\042\073\001\001\000\044\012\112" +
    "\015\052\016\111\017\110\020\106\021\105\022\103\023" +
    "\102\024\100\025\062\026\067\030\151\036\071\037\065" +
    "\040\077\041\074\042\073\001\001\000\010\043\201\044" +
    "\200\045\202\001\001\000\022\015\214\016\111\017\110" +
    "\020\106\021\105\022\103\023\102\024\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\204\001\001" +
    "\000\002\001\001\000\022\015\205\016\111\017\110\020" +
    "\106\021\105\022\103\023\102\024\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\112\015\052\016" +
    "\111\017\110\020\106\021\105\022\103\023\102\024\100" +
    "\025\062\026\067\027\207\030\061\036\071\037\065\040" +
    "\077\041\074\042\073\001\001\000\044\012\112\015\052" +
    "\016\111\017\110\020\106\021\105\022\103\023\102\024" +
    "\100\025\062\026\067\030\151\036\071\037\065\040\077" +
    "\041\074\042\073\001\001\000\002\001\001\000\046\012" +
    "\112\015\052\016\111\017\110\020\106\021\105\022\103" +
    "\023\102\024\100\025\062\026\067\027\212\030\061\036" +
    "\071\037\065\040\077\041\074\042\073\001\001\000\044" +
    "\012\112\015\052\016\111\017\110\020\106\021\105\022" +
    "\103\023\102\024\100\025\062\026\067\030\151\036\071" +
    "\037\065\040\077\041\074\042\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\012\112\015\052\016\111" +
    "\017\110\020\106\021\105\022\103\023\102\024\100\025" +
    "\062\026\067\027\216\030\061\036\071\037\065\040\077" +
    "\041\074\042\073\001\001\000\044\012\112\015\052\016" +
    "\111\017\110\020\106\021\105\022\103\023\102\024\100" +
    "\025\062\026\067\030\151\036\071\037\065\040\077\041" +
    "\074\042\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\223\016\111\017\110\020" +
    "\106\021\105\022\103\023\102\024\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\112\015\052\016" +
    "\111\017\110\020\106\021\105\022\103\023\102\024\100" +
    "\025\062\026\067\027\226\030\061\036\071\037\065\040" +
    "\077\041\074\042\073\001\001\000\044\012\112\015\052" +
    "\016\111\017\110\020\106\021\105\022\103\023\102\024" +
    "\100\025\062\026\067\030\151\036\071\037\065\040\077" +
    "\041\074\042\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\232\016\111\017\110\020\106\021\105" +
    "\022\103\023\102\024\100\001\001\000\002\001\001\000" +
    "\004\032\240\001\001\000\002\001\001\000\054\006\107" +
    "\012\112\015\052\016\111\017\110\020\106\021\105\022" +
    "\103\023\102\024\100\025\062\026\067\027\070\030\061" +
    "\035\064\036\071\037\065\040\077\041\074\042\073\050" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_list ::= expr6 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var_list ::= var_list COMMA expr6 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_call ::= ID OPENP CLOSEP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // procedure_call ::= ID OPENP var_list CLOSEP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // else ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else ::= ELSE OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elseif_else ::= else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*elseif_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elseif_else ::= elseif else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*elseif_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elseif ::= ELSEIF expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elseif ::= elseif ELSEIF expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF expr OPENB body CLOSEB elseif_else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while ::= WHILE expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assign ::= expr ASSIGN expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // output ::= OUT OUTSIGN expr6 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*output*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // input ::= IN INSIGN expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*input*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure ::= ID OPENP CLOSEP OPENB content CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*procedure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procedure ::= ID OPENP param_list CLOSEP OPENB content CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*procedure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param ::= ID AMPERSAND ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param ::= ID ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param ::= TYPE AMPERSAND ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // param_list ::= param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*param_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*param_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // body_part ::= RETURN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // body_part ::= if SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // body_part ::= procedure_call SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // body_part ::= procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // body_part ::= while SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // body_part ::= assign SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // body_part ::= output SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // body_part ::= input SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body_part ::= expr SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // body_part ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // body ::= body_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // body ::= body body_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // content ::= list_var 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // content ::= body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // content ::= list_var body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr7 ::= OPENP expr CLOSEP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr7 ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr7 ::= BOOL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr7 ::= CHAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr7 ::= INT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr6 ::= expr7 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr6 ::= expr6 PERIOD expr7 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr6 ::= NOT expr7 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr5 ::= expr6 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr5 ::= expr5 MULOP expr6 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr4 ::= expr5 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr4 ::= expr4 ADDOP expr5 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr3 ::= expr4 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr3 ::= expr3 RELOP expr4 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr2 ::= expr3 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr2 ::= expr2 EQOP expr3 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr1 ::= expr2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr1 ::= expr1 AMPERSAND expr2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr1 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr OR expr1 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // field_defn ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*field_defn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // field_defn ::= struct_var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*field_defn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // field_list ::= field_defn 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // field_list ::= field_list field_defn 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structure ::= STRUCT OPENB field_list CLOSEB ID SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structure ::= STRUCT ID OPENB field_list CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vars ::= COMMA ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= COMMA ID vars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decln ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decln ::= TYPE ID vars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_proc ::= procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*list_proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_proc ::= list_proc procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*list_proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_struct ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*list_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_struct ::= list_struct structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*list_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_var ::= var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*list_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_var ::= list_var var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*list_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct_var_decln ::= ID ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*struct_var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // struct_var_decln ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*struct_var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SL ::= list_proc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*SL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SL EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SL ::= list_struct list_proc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*SL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

