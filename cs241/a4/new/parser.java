
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Sun Nov 13 23:28:56 EST 2005
//----------------------------------------------------

import java.util.*;

/** CUP v0.10j generated parser.
  * @version Sun Nov 13 23:28:56 EST 2005
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\010\004\000\002\010\004\000\002\026\005" +
    "\000\002\026\004\000\002\037\004\000\002\037\003\000" +
    "\002\040\004\000\002\040\003\000\002\006\005\000\002" +
    "\006\004\000\002\007\005\000\002\007\004\000\002\012" +
    "\007\000\002\012\010\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\020\004\000\002\020\003\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\022\005\000\002\022\003\000\002\023\004\000\002" +
    "\023\005\000\002\023\004\000\002\023\005\000\002\016" +
    "\011\000\002\016\010\000\002\027\005\000\002\030\005" +
    "\000\002\031\005\000\002\032\007\000\002\033\010\000" +
    "\002\034\010\000\002\034\007\000\002\035\004\000\002" +
    "\035\003\000\002\036\006\000\002\036\002\000\002\017" +
    "\006\000\002\017\005\000\002\024\005\000\002\024\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\027\011\041\004\001\002\000\004\005" +
    "\041\001\002\000\004\002\040\001\002\000\006\027\ufff9" +
    "\041\ufff9\001\002\000\006\027\011\041\004\001\002\000" +
    "\006\002\ufff7\041\ufff7\001\002\000\006\007\015\041\014" +
    "\001\002\000\006\002\uffff\041\004\001\002\000\006\002" +
    "\ufff8\041\ufff8\001\002\000\004\007\033\001\002\000\010" +
    "\027\011\031\022\041\016\001\002\000\004\041\032\001" +
    "\002\000\012\010\uffed\027\uffed\031\uffed\041\uffed\001\002" +
    "\000\004\004\031\001\002\000\012\010\uffef\027\uffef\031" +
    "\uffef\041\uffef\001\002\000\004\041\030\001\002\000\012" +
    "\010\024\027\011\031\022\041\016\001\002\000\004\041" +
    "\026\001\002\000\012\010\ufff0\027\ufff0\031\ufff0\041\ufff0" +
    "\001\002\000\004\004\027\001\002\000\034\010\ufff1\013" +
    "\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1\027\ufff1" +
    "\031\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001\002\000" +
    "\004\004\ufffe\001\002\000\012\010\uffee\027\uffee\031\uffee" +
    "\041\uffee\001\002\000\004\004\ufffd\001\002\000\010\027" +
    "\011\031\022\041\016\001\002\000\012\010\035\027\011" +
    "\031\022\041\016\001\002\000\034\010\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2\027\ufff2\031\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002\000\006\027" +
    "\ufffa\041\ufffa\001\002\000\006\002\001\041\004\001\002" +
    "\000\004\002\000\001\002\000\010\006\044\031\046\041" +
    "\042\001\002\000\006\012\154\041\153\001\002\000\006" +
    "\006\223\011\222\001\002\000\004\007\052\001\002\000" +
    "\006\006\uffd0\011\uffd0\001\002\000\006\012\050\041\047" +
    "\001\002\000\006\006\uffcf\011\uffcf\001\002\000\004\041" +
    "\051\001\002\000\006\006\uffce\011\uffce\001\002\000\032" +
    "\013\060\015\061\016\064\021\057\022\056\023\101\027" +
    "\011\031\073\036\054\037\055\040\100\041\066\001\002" +
    "\000\024\004\217\012\110\014\116\026\220\030\114\032" +
    "\112\033\111\034\113\035\115\001\002\000\032\004\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\014\uffe2\026\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\032" +
    "\004\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\014\uffe3\026" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002" +
    "\000\004\024\215\001\002\000\014\013\060\036\054\037" +
    "\055\040\100\041\106\001\002\000\014\013\060\036\054" +
    "\037\055\040\100\041\106\001\002\000\004\004\207\001" +
    "\002\000\032\010\uffdc\013\uffdc\015\uffdc\016\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\027\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\001\002\000\032\010\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\027\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\001\002\000\014\013\060\036\054\037\055" +
    "\040\100\041\106\001\002\000\034\010\uffde\013\060\015" +
    "\061\016\064\021\057\022\056\023\101\027\011\031\073" +
    "\036\054\037\055\040\100\041\066\001\002\000\026\004" +
    "\uffe4\005\143\012\uffe4\014\uffe4\026\uffe4\030\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\001\002\000\004\004\142\001" +
    "\002\000\004\004\141\001\002\000\032\010\uffdf\013\060" +
    "\015\061\016\064\021\057\022\056\023\101\027\011\036" +
    "\054\037\055\040\100\041\066\001\002\000\004\004\137" +
    "\001\002\000\004\041\132\001\002\000\004\004\131\001" +
    "\002\000\004\004\130\001\002\000\004\004\127\001\002" +
    "\000\004\010\126\001\002\000\032\004\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\012\uffe1\014\uffe1\026\uffe1\030\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\001\002\000\004\025\105\001" +
    "\002\000\004\004\104\001\002\000\032\010\uffdb\013\uffdb" +
    "\015\uffdb\016\uffdb\021\uffdb\022\uffdb\023\uffdb\027\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\034\010\ufffb" +
    "\013\ufffb\015\ufffb\016\ufffb\021\ufffb\022\ufffb\023\ufffb\027" +
    "\ufffb\031\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002" +
    "\000\014\013\060\036\054\037\055\040\100\041\106\001" +
    "\002\000\032\004\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\026\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\001\002\000\022\004\uffc8\012\110\014\116\030\114" +
    "\032\112\033\111\034\113\035\115\001\002\000\014\013" +
    "\060\036\054\037\055\040\100\041\106\001\002\000\014" +
    "\013\060\036\054\037\055\040\100\041\106\001\002\000" +
    "\014\013\060\036\054\037\055\040\100\041\106\001\002" +
    "\000\014\013\060\036\054\037\055\040\100\041\106\001" +
    "\002\000\014\013\060\036\054\037\055\040\100\041\106" +
    "\001\002\000\014\013\060\036\054\037\055\040\100\041" +
    "\106\001\002\000\014\013\060\036\054\037\055\040\100" +
    "\041\106\001\002\000\032\004\uffec\006\uffec\007\uffec\011" +
    "\uffec\012\110\014\uffec\026\uffec\030\114\032\112\033\111" +
    "\034\113\035\115\001\002\000\032\004\uffea\006\uffea\007" +
    "\uffea\011\uffea\012\uffea\014\uffea\026\uffea\030\114\032\112" +
    "\033\111\034\113\035\uffea\001\002\000\032\004\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\026\uffe5\030\114" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\032\004" +
    "\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\014\uffe9\026\uffe9" +
    "\030\114\032\112\033\111\034\uffe9\035\uffe9\001\002\000" +
    "\032\004\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\014\uffe7" +
    "\026\uffe7\030\114\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001" +
    "\002\000\032\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\026\uffe8\030\114\032\112\033\uffe8\034\uffe8\035" +
    "\uffe8\001\002\000\032\004\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\026\uffeb\030\114\032\112\033\111\034" +
    "\113\035\115\001\002\000\034\002\uffca\010\uffca\013\uffca" +
    "\015\uffca\016\uffca\021\uffca\022\uffca\023\uffca\027\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\001\002\000\032\010\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\021\uffd7\022\uffd7\023\uffd7\027" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\032" +
    "\010\uffd6\013\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\027\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\032\010\uffd3\013\uffd3\015\uffd3\016\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\027\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\001\002\000\006\004\ufff5\011\133\001\002\000\004\041" +
    "\135\001\002\000\004\004\ufff6\001\002\000\006\004\ufff3" +
    "\011\133\001\002\000\004\004\ufff4\001\002\000\032\010" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\027\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000" +
    "\032\010\uffdd\013\uffdd\015\uffdd\016\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\027\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\032\010\uffd4\013\uffd4\015\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\027\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\001\002\000\032\010\uffd8\013\uffd8\015\uffd8\016\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\027\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\001\002\000\020\006\145\013\060\031\046" +
    "\036\054\037\055\040\100\041\144\001\002\000\026\006" +
    "\uffe4\011\uffe4\012\154\014\uffe4\030\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\041\153\001\002\000\006\004\uffbd\007" +
    "\052\001\002\000\006\006\151\011\150\001\002\000\024" +
    "\006\uffbb\011\uffbb\012\110\014\116\030\114\032\112\033" +
    "\111\034\113\035\115\001\002\000\014\013\060\036\054" +
    "\037\055\040\100\041\106\001\002\000\004\004\uffbe\001" +
    "\002\000\024\006\uffbc\011\uffbc\012\110\014\116\030\114" +
    "\032\112\033\111\034\113\035\115\001\002\000\006\006" +
    "\uffcd\011\uffcd\001\002\000\004\041\155\001\002\000\006" +
    "\006\uffcc\011\uffcc\001\002\000\032\010\uffe0\013\060\015" +
    "\061\016\064\021\057\022\056\023\101\027\011\036\054" +
    "\037\055\040\100\041\066\001\002\000\004\004\160\001" +
    "\002\000\034\010\ufffc\013\ufffc\015\ufffc\016\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\027\ufffc\031\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\001\002\000\022\007\162\012\110\014\116" +
    "\030\114\032\112\033\111\034\113\035\115\001\002\000" +
    "\030\013\060\015\061\016\064\021\057\022\056\023\101" +
    "\027\011\036\054\037\055\040\100\041\066\001\002\000" +
    "\032\010\164\013\060\015\061\016\064\021\057\022\056" +
    "\023\101\027\011\036\054\037\055\040\100\041\066\001" +
    "\002\000\010\004\uffbf\017\165\020\166\001\002\000\014" +
    "\013\060\036\054\037\055\040\100\041\106\001\002\000" +
    "\004\007\200\001\002\000\004\004\uffc5\001\002\000\010" +
    "\004\uffbf\017\172\020\166\001\002\000\004\004\uffc1\001" +
    "\002\000\014\013\060\036\054\037\055\040\100\041\106" +
    "\001\002\000\004\004\uffc2\001\002\000\022\007\175\012" +
    "\110\014\116\030\114\032\112\033\111\034\113\035\115" +
    "\001\002\000\030\013\060\015\061\016\064\021\057\022" +
    "\056\023\101\027\011\036\054\037\055\040\100\041\066" +
    "\001\002\000\032\010\177\013\060\015\061\016\064\021" +
    "\057\022\056\023\101\027\011\036\054\037\055\040\100" +
    "\041\066\001\002\000\010\004\uffc4\017\uffc4\020\uffc4\001" +
    "\002\000\030\013\060\015\061\016\064\021\057\022\056" +
    "\023\101\027\011\036\054\037\055\040\100\041\066\001" +
    "\002\000\032\010\202\013\060\015\061\016\064\021\057" +
    "\022\056\023\101\027\011\036\054\037\055\040\100\041" +
    "\066\001\002\000\004\004\uffc0\001\002\000\022\007\204" +
    "\012\110\014\116\030\114\032\112\033\111\034\113\035" +
    "\115\001\002\000\030\013\060\015\061\016\064\021\057" +
    "\022\056\023\101\027\011\036\054\037\055\040\100\041" +
    "\066\001\002\000\032\010\206\013\060\015\061\016\064" +
    "\021\057\022\056\023\101\027\011\036\054\037\055\040" +
    "\100\041\066\001\002\000\010\004\uffc3\017\uffc3\020\uffc3" +
    "\001\002\000\032\010\uffd2\013\uffd2\015\uffd2\016\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\027\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\001\002\000\032\004\uffe6\006\uffe6\007\uffe6\011" +
    "\uffe6\012\uffe6\014\uffe6\026\uffe6\030\114\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\001\002\000\022\007\212\012\110\014" +
    "\116\030\114\032\112\033\111\034\113\035\115\001\002" +
    "\000\030\013\060\015\061\016\064\021\057\022\056\023" +
    "\101\027\011\036\054\037\055\040\100\041\066\001\002" +
    "\000\032\010\214\013\060\015\061\016\064\021\057\022" +
    "\056\023\101\027\011\036\054\037\055\040\100\041\066" +
    "\001\002\000\004\004\uffc6\001\002\000\014\013\060\036" +
    "\054\037\055\040\100\041\106\001\002\000\022\004\uffc9" +
    "\012\110\014\116\030\114\032\112\033\111\034\113\035" +
    "\115\001\002\000\032\010\uffda\013\uffda\015\uffda\016\uffda" +
    "\021\uffda\022\uffda\023\uffda\027\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\001\002\000\014\013\060\036\054\037\055" +
    "\040\100\041\106\001\002\000\022\004\uffc7\012\110\014" +
    "\116\030\114\032\112\033\111\034\113\035\115\001\002" +
    "\000\006\031\046\041\042\001\002\000\004\007\224\001" +
    "\002\000\032\013\060\015\061\016\064\021\057\022\056" +
    "\023\101\027\011\031\073\036\054\037\055\040\100\041" +
    "\066\001\002\000\004\010\226\001\002\000\034\002\uffcb" +
    "\010\uffcb\013\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\027\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002" +
    "\000\006\006\uffd1\011\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\003\004\012\005\016\007\037\006\040" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\035\016\007\040\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\022\005" +
    "\020\010\017\012\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\024\010\017\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\033\005\020\010\017\012\016\001\001\000" +
    "\010\005\024\010\017\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\012\001\001\000\002\001" +
    "\001\000\006\022\042\023\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\101\012\102\015\052\016\062\017" +
    "\067\020\070\021\061\026\064\027\071\030\066\031\075" +
    "\032\074\033\073\041\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\210\001\001\000\004\015\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\160" +
    "\001\001\000\032\006\156\012\102\015\052\016\062\017" +
    "\067\020\155\021\061\027\071\030\066\031\075\032\074" +
    "\033\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\102\015\052\016\062\017\067" +
    "\021\137\027\071\030\066\031\075\032\074\033\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\124\001\001" +
    "\000\004\015\123\001\001\000\004\015\122\001\001\000" +
    "\004\015\121\001\001\000\004\015\120\001\001\000\004" +
    "\015\117\001\001\000\004\015\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\146\022\042\023\044\024\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\102\015\052\016\062" +
    "\017\067\021\137\027\071\030\066\031\075\032\074\033" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\102\015\052\016\062\017\067\020" +
    "\162\021\061\027\071\030\066\031\075\032\074\033\073" +
    "\001\001\000\026\012\102\015\052\016\062\017\067\021" +
    "\137\027\071\030\066\031\075\032\074\033\073\001\001" +
    "\000\010\034\167\035\166\036\170\001\001\000\004\015" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\172\001\001\000\002\001\001\000\004\015\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\102" +
    "\015\052\016\062\017\067\020\175\021\061\027\071\030" +
    "\066\031\075\032\074\033\073\001\001\000\026\012\102" +
    "\015\052\016\062\017\067\021\137\027\071\030\066\031" +
    "\075\032\074\033\073\001\001\000\002\001\001\000\030" +
    "\012\102\015\052\016\062\017\067\020\200\021\061\027" +
    "\071\030\066\031\075\032\074\033\073\001\001\000\026" +
    "\012\102\015\052\016\062\017\067\021\137\027\071\030" +
    "\066\031\075\032\074\033\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\102\015\052\016\062\017" +
    "\067\020\204\021\061\027\071\030\066\031\075\032\074" +
    "\033\073\001\001\000\026\012\102\015\052\016\062\017" +
    "\067\021\137\027\071\030\066\031\075\032\074\033\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\102\015\052\016\062" +
    "\017\067\020\212\021\061\027\071\030\066\031\075\032" +
    "\074\033\073\001\001\000\026\012\102\015\052\016\062" +
    "\017\067\021\137\027\071\030\066\031\075\032\074\033" +
    "\073\001\001\000\002\001\001\000\004\015\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\220\001" +
    "\001\000\002\001\001\000\004\023\226\001\001\000\002" +
    "\001\001\000\036\006\101\012\102\015\052\016\062\017" +
    "\067\020\070\021\061\026\064\027\071\030\066\031\075" +
    "\032\074\033\073\041\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_list ::= var_list COMMA expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_call ::= ID OPENP CLOSEP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedure_call ::= ID OPENP var_list CLOSEP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else ::= ELSE OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elseif_else ::= else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*elseif_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elseif_else ::= elseif else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*elseif_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elseif ::= ELSEIF expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elseif ::= elseif ELSEIF expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if ::= IF expr OPENB body CLOSEB elseif_else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE expr OPENB body CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign ::= expr ASSIGN expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // output ::= OUT OUTSIGN expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*output*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // input ::= IN INSIGN expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*input*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedure ::= ID OPENP CLOSEP OPENB content CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*procedure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // procedure ::= ID OPENP param_list CLOSEP OPENB content CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*procedure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // param ::= ID AMPERSAND ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // param ::= ID ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // param ::= TYPE AMPERSAND ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // param ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // param_list ::= param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*param_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*param_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body_part ::= RETURN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // body_part ::= if SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // body_part ::= procedure_call SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // body_part ::= procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // body_part ::= while SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // body_part ::= assign SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // body_part ::= output SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body_part ::= input SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // body_part ::= expr SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body_part ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*body_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= body_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= body body_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // content ::= list_var 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // content ::= body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // content ::= list_var body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*content*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= BOOL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= INT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= CHAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PERIOD expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NOT expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MULOP expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr ADDOP expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr RELOP expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr EQOP expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr AMPERSAND expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr OR expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // field_defn ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*field_defn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // field_defn ::= struct_var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*field_defn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // field_list ::= field_defn 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // field_list ::= field_list field_defn 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structure ::= STRUCT OPENB field_list CLOSEB ID SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structure ::= STRUCT ID OPENB field_list CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vars ::= COMMA ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= COMMA ID vars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decln ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decln ::= TYPE ID vars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_proc ::= procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*list_proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_proc ::= list_proc procedure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*list_proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_struct ::= structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*list_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_struct ::= list_struct structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*list_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_var ::= var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*list_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_var ::= list_var var_decln SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*list_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct_var_decln ::= ID ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*struct_var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // struct_var_decln ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*struct_var_decln*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SL ::= list_proc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*SL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SL EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SL ::= list_struct list_proc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*SL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

