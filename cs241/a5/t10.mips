method:
	sw	$31, -8($30)
	llo	$1, 43		# Load 43
	lhi	$1, 43
	llo	$2, 45		# Load 45
	lhi	$2, 45
	div	$1, $2		# mod
	mfhi	$1
	sw	$1, -20($30)	# saving variable
	addi	$1, $0, 1	# Load true
	sw	$1, -16($30)	# saving variable
	lw	$1, -16($30)	# load bool variable
	bne	$0, $1, _E1	# if 'true', skip
	addi	$4, $0, 102	# print 'f'
	trap	101			
	addi	$4, $0, 97	# print 'a'
	trap	101			
	addi	$4, $0, 108	# print 'l'
	trap	101			
	addi	$4, $0, 115	# print 's'
	trap	101			
	addi	$4, $0, 101	# print 'e'
	trap	101			
	j	_L1
_E1:
	addi	$4, $0, 116	# print 't'
	trap	101			
	addi	$4, $0, 114	# print 'r'
	trap	101			
	addi	$4, $0, 117	# print 'u'
	trap	101			
	addi	$4, $0, 101	# print 'e'
	trap	101			
_L1:
	addi	$1, $0, 10	# Load ASCII value
	add	$4, $1, $0	# printing char
	trap	101
	lw	$1, -12($30)	# load int variable
	add	$4, $1, $0	# printing int
	trap	1
	addi	$1, $0, 10	# Load ASCII value
	add	$4, $1, $0	# printing char
	trap	101
	lw	$1, -20($30)	# load int variable
	add	$4, $1, $0	# printing int
	trap	1
	addi	$1, $0, 10	# Load ASCII value
	add	$4, $1, $0	# printing char
	trap	101
	lw	$31, -8($30)
	jr	$31
.globl main
main:
	addi	$1, $0, 36	# Load ASCII value
	sw	$1, -36($30)	# saving variable
	addi	$1, $0, 0	# Load false
	sw	$1, -32($30)	# saving variable
	lw	$1, -32($30)	# load bool variable
	bne	$0, $1, _E2	# if 'true', skip
	addi	$4, $0, 102	# print 'f'
	trap	101			
	addi	$4, $0, 97	# print 'a'
	trap	101			
	addi	$4, $0, 108	# print 'l'
	trap	101			
	addi	$4, $0, 115	# print 's'
	trap	101			
	addi	$4, $0, 101	# print 'e'
	trap	101			
	j	_L2
_E2:
	addi	$4, $0, 116	# print 't'
	trap	101			
	addi	$4, $0, 114	# print 'r'
	trap	101			
	addi	$4, $0, 117	# print 'u'
	trap	101			
	addi	$4, $0, 101	# print 'e'
	trap	101			
_L2:
	lw	$1, -36($30)	# load char variable
	add	$4, $1, $0	# printing char
	trap	101
	llo	$1, 21341		# Load 21341
	lhi	$1, 21341
	sw	$1, -28($30)	# saving variable
	lw	$1, -28($30)	# load int variable
	sw	$1, -12($30)	# save parameter
	jal	method
_E8:				# while
	lw	$2, -32($30)	# load bool variable
	addi	$3, $0, 0	# Load false
	sub	$2, $2, $3	# subtracting
	bne	$0, $2, _E3	# if not equal
	addi	$2, $0, 1	# load 'true'
	j	_L3
_E3:				# if equal
	add	$2, $0, $0	# load 'false'
_L3:
	lw	$3, -28($30)	# load int variable
	llo	$4, 0		# Load 0
	lhi	$4, 0
	slt	$3, $3, $4	# comparing
	or	$2, $2, $3	# OR
	blez	$2, _L7
				# if #5
	lw	$1, -32($30)	# load bool variable
	addi	$2, $0, 1	# put 1 into $2
	xor	$1, $1, $2	# OR
	blez	$1, _E5
	llo	$1, -1		# Load -1
	lhi	$1, -1
	lw	$2, -28($30)	# load int variable
	lw	$3, -28($30)	# load int variable
	add	$2, $2, $3	# adding
	llo	$3, 2		# Load 2
	lhi	$3, 2
	mult	$2, $3		# multiply
	mflo	$2
	llo	$3, 20		# Load 20
	lhi	$3, 20
	div	$2, $3		# mod
	mfhi	$2
	add	$1, $1, $2	# adding
	sw	$1, -28($30)	# saving variable
	addi	$1, $0, 1	# Load true
	sw	$1, -32($30)	# saving variable
	j	_L5
_E5:				# elseif #5
			addi	$1, $0, 1	# Load true
	blez	$1, _E6
	llo	$1, 17		# Load 17
	lhi	$1, 17
	sw	$1, -28($30)	# saving variable
				# if #4
	lw	$1, -32($30)	# load bool variable
	blez	$1, _E4
	llo	$1, -1		# Load -1
	lhi	$1, -1
	sw	$1, -28($30)	# saving variable
	j	_L4
_E4:				# else
	lw	$1, -28($30)	# load int variable
	llo	$2, 3		# Load 3
	lhi	$2, 3
	mult	$1, $2		# multiply
	mflo	$1
	sw	$1, -28($30)	# saving variable
_L4:
	j	_L5
_E6:				# else
	llo	$1, 6		# Load 6
	lhi	$1, 6
	sw	$1, -28($30)	# saving variable
_L5:
_E7:				# while
	lw	$1, -28($30)	# load int variable
	llo	$2, 20		# Load 20
	lhi	$2, 20
	slt	$1, $1, $2	# comparing
	blez	$1, _L6
	lw	$1, -28($30)	# load int variable
	add	$4, $1, $0	# printing int
	trap	1
	addi	$1, $0, 10	# Load ASCII value
	add	$4, $1, $0	# printing char
	trap	101
	lw	$1, -28($30)	# load int variable
	llo	$2, 2		# Load 2
	lhi	$2, 2
	add	$1, $1, $2	# adding
	sw	$1, -28($30)	# saving variable
	j	_E7
_L6:				# while end
	lw	$1, -28($30)	# load int variable
	add	$4, $1, $0	# printing int
	trap	1
	j	_E8
_L7:				# while end
	addi	$1, $0, 10	# Load ASCII value
	add	$4, $1, $0	# printing char
	trap	101
	trap	10		# Quit
