
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Fri Nov 25 18:35:42 EST 2005
//----------------------------------------------------

import java.util.*;

/** CUP v0.10j generated parser.
  * @version Fri Nov 25 18:35:42 EST 2005
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\005\004\000\002\005\002\000\002\006\007" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\010\000\002\011\004\000\002" +
    "\011\003\000\002\042\002\000\002\012\013\000\002\013" +
    "\003\000\002\013\002\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\017\005\000\002\017\002\000\002" +
    "\016\004\000\002\016\004\000\002\040\005\000\002\040" +
    "\003\000\002\020\005\000\002\020\004\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\026\005\000\002\025\005\000\002\024\005\000\002\022" +
    "\003\000\002\043\002\000\002\032\007\000\002\027\003" +
    "\000\002\027\002\000\002\030\005\000\002\030\003\000" +
    "\002\031\003\000\002\023\007\000\002\033\011\000\002" +
    "\034\010\000\002\034\002\000\002\035\006\000\002\035" +
    "\002\000\002\037\003\000\002\036\003\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\004\000\002\041\003\000\002\041\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\027\ufffd\041\ufffd\001\002\000\004\002" +
    "\001\001\002\000\004\002\214\001\002\000\006\027\012" +
    "\041\007\001\002\000\004\005\ufff4\001\002\000\006\027" +
    "\ufffe\041\ufffe\001\002\000\006\002\ufff5\041\ufff5\001\002" +
    "\000\004\041\015\001\002\000\006\002\uffff\041\007\001" +
    "\002\000\006\002\ufff6\041\ufff6\001\002\000\004\007\016" +
    "\001\002\000\010\027\022\031\023\041\017\001\002\000" +
    "\004\041\035\001\002\000\012\010\ufffa\027\ufffa\031\ufffa" +
    "\041\ufffa\001\002\000\012\010\034\027\022\031\023\041" +
    "\017\001\002\000\004\007\026\001\002\000\004\041\024" +
    "\001\002\000\004\004\025\001\002\000\012\010\ufff9\027" +
    "\ufff9\031\ufff9\041\ufff9\001\002\000\010\027\022\031\023" +
    "\041\017\001\002\000\012\010\030\027\022\031\023\041" +
    "\017\001\002\000\004\041\032\001\002\000\012\010\ufffb" +
    "\027\ufffb\031\ufffb\041\ufffb\001\002\000\004\004\033\001" +
    "\002\000\012\010\ufff7\027\ufff7\031\ufff7\041\ufff7\001\002" +
    "\000\006\027\ufffc\041\ufffc\001\002\000\004\004\036\001" +
    "\002\000\012\010\ufff8\027\ufff8\031\ufff8\041\ufff8\001\002" +
    "\000\004\005\040\001\002\000\010\006\ufff1\031\045\041" +
    "\041\001\002\000\006\012\211\041\212\001\002\000\006" +
    "\006\ufff2\011\207\001\002\000\004\006\051\001\002\000" +
    "\006\006\uffef\011\uffef\001\002\000\006\012\047\041\046" +
    "\001\002\000\006\006\uffee\011\uffee\001\002\000\004\041" +
    "\050\001\002\000\006\006\uffec\011\uffec\001\002\000\004" +
    "\007\052\001\002\000\020\015\uffe9\016\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\031\uffe9\041\uffe9\001\002\000\020\015\057" +
    "\016\060\021\056\022\055\023\073\031\067\041\063\001" +
    "\002\000\006\026\205\030\131\001\002\000\004\024\203" +
    "\001\002\000\020\005\106\013\110\033\102\036\100\037" +
    "\111\040\101\041\105\001\002\000\004\004\uffd8\001\002" +
    "\000\020\005\106\013\110\033\102\036\100\037\111\040" +
    "\101\041\105\001\002\000\004\004\uffde\001\002\000\020" +
    "\010\154\015\057\016\060\021\056\022\055\023\073\041" +
    "\155\001\002\000\012\005\uffd7\026\uffbc\030\uffbc\041\134" +
    "\001\002\000\004\004\uffe2\001\002\000\004\004\140\001" +
    "\002\000\004\004\uffe1\001\002\000\004\041\134\001\002" +
    "\000\004\004\uffdd\001\002\000\004\004\uffdf\001\002\000" +
    "\004\004\uffe0\001\002\000\004\025\077\001\002\000\004" +
    "\004\076\001\002\000\004\004\uffdc\001\002\000\020\010" +
    "\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\023\uffe3\041\uffe3" +
    "\001\002\000\020\005\106\013\110\033\102\036\100\037" +
    "\111\040\101\041\105\001\002\000\026\004\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\014\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\001\002\000\026\004\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\012\uffbe\014\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\001\002\000\004\036\133\001\002\000\022\004\uffca" +
    "\007\uffca\012\113\014\120\032\114\033\115\034\116\035" +
    "\117\001\002\000\030\004\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\030\131\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\001\002\000\030\004\uffbc\006\uffbc\007\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\001\002\000\020\005\106\013\110\033\102\036\100" +
    "\037\111\040\101\041\105\001\002\000\004\004\uffdb\001" +
    "\002\000\020\005\106\013\110\033\102\036\100\037\111" +
    "\040\101\041\105\001\002\000\026\004\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\014\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\001\002\000\026\004\uffc3\006\uffc3\007\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\001\002\000\020\005\106\013\110\033\102\036\100\037" +
    "\111\040\101\041\105\001\002\000\020\005\106\013\110" +
    "\033\102\036\100\037\111\040\101\041\105\001\002\000" +
    "\020\005\106\013\110\033\102\036\100\037\111\040\101" +
    "\041\105\001\002\000\020\005\106\013\110\033\102\036" +
    "\100\037\111\040\101\041\105\001\002\000\020\005\106" +
    "\013\110\033\102\036\100\037\111\040\101\041\105\001" +
    "\002\000\020\005\106\013\110\033\102\036\100\037\111" +
    "\040\101\041\105\001\002\000\026\004\uffc2\006\uffc2\007" +
    "\uffc2\011\uffc2\012\113\014\uffc2\032\114\033\115\034\116" +
    "\035\117\001\002\000\026\004\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\012\uffc6\014\uffc6\032\114\033\115\034\116\035\uffc6" +
    "\001\002\000\026\004\uffc5\006\uffc5\007\uffc5\011\uffc5\012" +
    "\uffc5\014\uffc5\032\114\033\115\034\uffc5\035\uffc5\001\002" +
    "\000\026\004\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\032\114\033\uffc8\034\uffc8\035\uffc8\001\002\000\026" +
    "\004\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\001\002\000\026\004\uffc1" +
    "\006\uffc1\007\uffc1\011\uffc1\012\uffc1\014\uffc1\032\114\033" +
    "\115\034\116\035\117\001\002\000\020\006\130\012\113" +
    "\014\120\032\114\033\115\034\116\035\117\001\002\000" +
    "\026\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\001\002\000\004\041" +
    "\132\001\002\000\032\004\uffbb\006\uffbb\007\uffbb\011\uffbb" +
    "\012\uffbb\014\uffbb\026\uffbb\030\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\001\002\000\026\004\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\014\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\001\002\000\006\004\uffe5\011\uffe5\001\002\000\006" +
    "\004\uffe8\011\136\001\002\000\004\041\137\001\002\000" +
    "\006\004\uffe6\011\uffe6\001\002\000\020\015\uffea\016\uffea" +
    "\021\uffea\022\uffea\023\uffea\031\uffea\041\uffea\001\002\000" +
    "\004\005\143\001\002\000\006\004\uffe7\011\136\001\002" +
    "\000\022\005\106\006\uffd4\013\110\033\102\036\100\037" +
    "\111\040\101\041\105\001\002\000\004\006\152\001\002" +
    "\000\006\006\uffd5\011\150\001\002\000\022\006\uffd1\011" +
    "\uffd1\012\113\014\120\032\114\033\115\034\116\035\117" +
    "\001\002\000\006\006\uffd2\011\uffd2\001\002\000\020\005" +
    "\106\013\110\033\102\036\100\037\111\040\101\041\105" +
    "\001\002\000\006\006\uffd3\011\uffd3\001\002\000\004\004" +
    "\uffd6\001\002\000\004\004\156\001\002\000\006\002\ufff3" +
    "\041\ufff3\001\002\000\010\005\uffd7\026\uffbc\030\uffbc\001" +
    "\002\000\020\010\uffe4\015\uffe4\016\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\041\uffe4\001\002\000\004\007\160\001\002\000" +
    "\016\015\057\016\060\021\056\022\055\023\073\041\155" +
    "\001\002\000\020\010\162\015\057\016\060\021\056\022" +
    "\055\023\073\041\155\001\002\000\010\004\uffcd\017\163" +
    "\020\uffcd\001\002\000\020\005\106\013\110\033\102\036" +
    "\100\037\111\040\101\041\105\001\002\000\006\004\uffcb" +
    "\020\165\001\002\000\004\007\167\001\002\000\004\004" +
    "\uffcf\001\002\000\016\015\057\016\060\021\056\022\055" +
    "\023\073\041\155\001\002\000\020\010\171\015\057\016" +
    "\060\021\056\022\055\023\073\041\155\001\002\000\004" +
    "\004\uffcc\001\002\000\004\007\173\001\002\000\016\015" +
    "\057\016\060\021\056\022\055\023\073\041\155\001\002" +
    "\000\020\010\175\015\057\016\060\021\056\022\055\023" +
    "\073\041\155\001\002\000\010\004\uffcd\017\163\020\uffcd" +
    "\001\002\000\006\004\uffce\020\uffce\001\002\000\004\007" +
    "\200\001\002\000\016\015\057\016\060\021\056\022\055" +
    "\023\073\041\155\001\002\000\020\010\202\015\057\016" +
    "\060\021\056\022\055\023\073\041\155\001\002\000\004" +
    "\004\uffd0\001\002\000\004\041\105\001\002\000\006\004" +
    "\uffda\030\131\001\002\000\020\005\106\013\110\033\102" +
    "\036\100\037\111\040\101\041\105\001\002\000\004\004" +
    "\uffd9\001\002\000\006\031\045\041\041\001\002\000\006" +
    "\006\ufff0\011\ufff0\001\002\000\004\041\213\001\002\000" +
    "\006\006\uffed\011\uffed\001\002\000\006\006\uffeb\011\uffeb" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\003\004\004\003\005\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\007\011\012" +
    "\012\010\001\001\000\004\042\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\020\010\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\026" +
    "\010\017\001\001\000\004\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\042\014\041\015\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\052\001\001\000\030\016\064\020\061\021\073\022\070" +
    "\023\067\024\071\025\065\026\063\032\060\033\074\041" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\102\037\176\041\103\001\001\000\002\001\001\000" +
    "\010\036\102\037\156\041\103\001\001\000\002\001\001" +
    "\000\024\021\152\022\070\023\067\024\071\025\065\026" +
    "\063\032\060\033\074\041\053\001\001\000\006\040\141" +
    "\043\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\102\037\106\041\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\126\041\103\001" +
    "\001\000\002\001\001\000\006\036\111\041\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\125\041" +
    "\103\001\001\000\006\036\124\041\103\001\001\000\006" +
    "\036\123\041\103\001\001\000\006\036\122\041\103\001" +
    "\001\000\006\036\121\041\103\001\001\000\006\036\120" +
    "\041\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\143\030\144\031\146\036\145\041\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\150\036\145\041\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\160\021\073\022\070\023\067" +
    "\024\071\025\065\026\063\032\060\033\074\041\053\001" +
    "\001\000\024\021\152\022\070\023\067\024\071\025\065" +
    "\026\063\032\060\033\074\041\053\001\001\000\004\034" +
    "\163\001\001\000\010\036\102\037\171\041\103\001\001" +
    "\000\004\035\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\167\021\073\022\070\023\067\024\071" +
    "\025\065\026\063\032\060\033\074\041\053\001\001\000" +
    "\024\021\152\022\070\023\067\024\071\025\065\026\063" +
    "\032\060\033\074\041\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\173\021\073\022\070\023\067" +
    "\024\071\025\065\026\063\032\060\033\074\041\053\001" +
    "\001\000\024\021\152\022\070\023\067\024\071\025\065" +
    "\026\063\032\060\033\074\041\053\001\001\000\004\034" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\200\021\073\022\070\023\067\024\071\025\065\026" +
    "\063\032\060\033\074\041\053\001\001\000\024\021\152" +
    "\022\070\023\067\024\071\025\065\026\063\032\060\033" +
    "\074\041\053\001\001\000\002\001\001\000\004\041\203" +
    "\001\001\000\002\001\001\000\010\036\102\037\205\041" +
    "\103\001\001\000\002\001\001\000\004\015\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private int offset = 1;
	private int reg = 1;
	private int myL = 1;
	private int myE = 1;
	private int curE = 0;
	private int max_reg = 31;
	private int procIndex = 1;
	private String currProc = "main";
	private String lastProc = "";
	private String recStart = "";
	private ArrayList arrayList;
	private Hashtable<String, VarTable> tables = new Hashtable();

	public class Var{
		public String varName;
		public String type;
		public int address;
		public boolean ref;

		public Var(String n, String t, int a, boolean r) {
			varName = n;
			type = t;
			address = a;
			ref = r;
		}

		public boolean getRef() { return ref; }

		public int getAddress() { return address; }

		public String getType() { return type; }

		public String getName() { return varName; }

		public void setAddress(int s) { address = s; }
	}

	public class VarTable {
		public ArrayList arrayList = new ArrayList();
		public int num;
		
		public VarTable(int n) {
			arrayList.add(new Var("_", "", n, false));
			num = 0;
		} 

		public Var getVar(String s) throws CompileException {
			Var var;
			for (int i=0; i<arrayList.size(); i++) {
				var = (Var)(arrayList.get(i));
				if (var.getName().equals(s)) {
					return var;
				}
			}
			throw new CompileException("Variable '" + s + "' has not been declared");
		}

		public void addVar(String n, Var v) throws CompileException {
			if (containsKey(n)) {
				throw new CompileException("Variable '" + n + "' has already been declared in procedure '" + currProc + "'");
			}
			else {
				arrayList.add(v);
			}
		}

		public boolean containsKey(String s) {
			Var var;
                        for (int i=0; i<arrayList.size(); i++) {
                                var = (Var)(arrayList.get(i)); 
                                if (var.getName().equals(s)) {
                                        return true;
                                }
                        }
			return false;
		}
	}

	public class Expr {
		public String code;
		public String type;
		public int reg;
		public int address;
		public boolean ref;

		public Expr(String s, String t, int i, int a, boolean r) {
			code = s;
			type = t;
			reg = i;
			address = a;
			ref = r;
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variableExpr ::= variableExpr PERIOD ID 
            {
              Var RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*variableExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variableExpr ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				if (varTable.containsKey(id)) { RESULT = varTable.getVar(id); }
				else { throw new CompileException("Undeclared variable '" + id + "'"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(31/*variableExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valueExpr ::= ADDOP INT 
            {
              Expr RESULT = null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String addop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if (addop.equals("+")) { throw new CompileException("Attempted to perform unary addition"); }
				String code = "\tllo\t$" + reg + ", -" + i.intValue() + "\t\t# Load -" + i.intValue() +
						"\n\tlhi\t$" + reg + ", -" + i.intValue() + "\n";
				RESULT = new Expr(code, "int", reg, 0, false);
				reg++;
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valueExpr ::= BOOL 
            {
              Expr RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				String value;
				if (b==true) { value = "1"; } else { value = "0"; }
	                        String code = "\taddi\t$" + reg + ", $0, " + value + "\t# Load " + b + "\n";
                                RESULT = new Expr(code, "bool", reg, 0, false);
                                reg++;
                        
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valueExpr ::= CHAR 
            {
              Expr RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			String code = "\taddi\t$" + reg + ", $0, " + (int)(c.charAt(0)) + "\t# Load ASCII value\n";
				RESULT = new Expr(code, "char", reg, 0, false);
				reg++;
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valueExpr ::= INT 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				String code = "\tllo\t$" + reg + ", " + i.intValue() + "\t\t# Load " + i.intValue() +
				"\n\tlhi\t$" + reg + ", " + i.intValue() + "\n";
				RESULT = new Expr(code, "int", reg, 0, false);
				reg++;
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valueExpr ::= valueExpr AMPERSAND valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                if ((v1.type.equals(v2.type)) && (v1.type.equals("bool"))) {
                                        String code = v1.code + v2.code
						+ "\tand\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# OR\n";
                                        RESULT = new Expr(code, "bool", v1.reg, 0, false);
                                        reg--;
                                }
                                else { throw new CompileException("Type mismatch: AND operates on boolean values"); }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valueExpr ::= valueExpr OR valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if ((v1.type.equals(v2.type)) && (v1.type.equals("bool"))) {
                        		String code = v1.code + v2.code
						+ "\tor\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# OR\n";
                                	RESULT = new Expr(code, "bool", v1.reg, 0, false);
                                	reg--;
				}
				else { throw new CompileException("Type mismatch: OR operates on boolean values only"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valueExpr ::= NOT valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				int temp = v1.reg+1;
                                if (v1.type.equals("bool")) {
                                        String code = v1.code + "\taddi\t$" + temp + ", $0, 1\t# put 1 into $" + temp + "\n"
						+ "\txor\t$" + v1.reg + ", $" + v1.reg + ", $" + temp + "\t# OR\n";
                                        RESULT = new Expr(code, "bool", v1.reg, 0, false);
                                }
                                else { throw new CompileException("Type mismatch: NOT operates on boolean values only"); }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valueExpr ::= OPENP valueExpr CLOSEP 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valueExpr ::= valueExpr RELOP valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                if ((v1.type.equals(v2.type)) && (v1.type.equals("int"))) {
                                        if (o.equals("<")) {
                                                String code = v1.code + v2.code
							+ "\tslt\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# comparing\n";
                                                RESULT = new Expr(code, "bool", v1.reg, 0, false);
                                                reg--;
                                        }
                                        else if (o.equals(">")) {
                                                String code = v1.code + v2.code
							+ "\tslt\t$" + v1.reg + ", $" + v2.reg + ", $" + v1.reg + "\t# comparing\n";
                                                RESULT = new Expr(code, "bool", v1.reg, 0, false);
                                                reg--;
                                        } 
				}
				else { throw new CompileException("Type mismatch: RELOP operates on int values only"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valueExpr ::= valueExpr EQOP valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                if ((v1.type.equals(v2.type))) {
                                	String code = v1.code + v2.code
							+ "\tsub\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# subtracting\n"
							+ "\tbne\t$0, $" + v1.reg + ", _E" + myE + "\t# if not equal\n"
							+ "\taddi\t$" + v1.reg + ", $0, 1\t# load 'true'\n"
							+ "\tj\t_L" + myL + "\n_E" + myE + ":\t\t\t\t# if equal\n"
							+ "\tadd\t$" + v1.reg + ", $0, $0\t# load 'false'\n"
							+ "_L" + myL + ":\n"; 
                                        RESULT = new Expr(code, "bool", v1.reg, 0, false);
					myL++; myE++;
                                        reg--;
                                }
                                else { throw new CompileException("Types must match: got '" + v1.type + "' and '" + v2.type + "'");}
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valueExpr ::= valueExpr MULOP valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                if ((v1.type.equals(v2.type)) && (v1.type.equals("int"))) {
					if (o.equals("*")) {
						String code = v1.code + v2.code + "\tmult\t$" + v1.reg + ", $" + v2.reg + 
								"\t\t# multiply\n" + "\tmflo\t$" + v1.reg + "\n";
                                        	RESULT = new Expr(code, "int", v1.reg, 0, false);
						reg--;
                                	}
					else if (o.equals("/")) {
                                                String code = v1.code + v2.code + "\tdiv\t$" + v1.reg + ", $" + v2.reg +
                                                                "\t\t# divide\n" + "\tmflo\t$" + v1.reg + "\n";
                                                RESULT = new Expr(code, "int", v1.reg, 0, false);
                                                reg--;   
                                        }
					else if (o.equals("%")) {
                                                String code = v1.code + v2.code + "\tdiv\t$" + v1.reg + ", $" + v2.reg +
                                                                "\t\t# mod\n" + "\tmfhi\t$" + v1.reg + "\n";
                                                RESULT = new Expr(code, "int", v1.reg, 0, false);
                                                reg--;   
                                        }
				}
                                else { throw new CompileException("Wrong types specified"); }
                        
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valueExpr ::= valueExpr ADDOP valueExpr 
            {
              Expr RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if ((v1.type.equals(v2.type)) && (v1.type.equals("int"))) {
					if (o.equals("+")) {
                                        	String code = v1.code + v2.code + "\tadd\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# adding\n";
						RESULT = new Expr(code, "int", v1.reg, 0, false);
						reg--;
					}
					else if (o.equals("-")) {
                                                String code = v1.code + v2.code + "\tsub\t$" + v1.reg + ", $" + v1.reg + ", $" + v2.reg + "\t# subtracting\n";
                                                RESULT = new Expr(code, "int", v1.reg, 0, false);
                                                reg--; 
                                        }

				}
				else { throw new CompileException("Wrong types specified"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valueExpr ::= variableExpr 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if (v.getType().equals("int")) {
					String code = "\tlw\t$" + reg + ", " + v.getAddress() + "($30)\t# load int variable\n";
					RESULT = new Expr(code, v.getType(), reg, v.address, v.ref);
					reg++;
				}
				else if (v.getType().equals("char")) {
					String code = "\tlw\t$" + reg + ", " + v.getAddress() + "($30)\t# load char variable\n";
					RESULT = new Expr(code, v.getType(), reg, v.address, v.ref);
					reg++;
				}
                                else if (v.getType().equals("bool")) {
                                        String code = "\tlw\t$" + reg + ", " + v.getAddress() + "($30)\t# load bool variable\n";
                                        RESULT = new Expr(code, v.getType(), reg, v.address, v.ref);
                                        reg++;
                                }
				else { throw new CompileException("Type mismatch"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*valueExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mainExpr ::= valueExpr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = e;
				reg=1;
			
              CUP$parser$result = new java_cup.runtime.Symbol(29/*mainExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optElse ::= 
            {
              String RESULT = null;
		 RESULT = "_E" + myE + ":\t\t\t\t# no else\n"; myE++; curE++; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*optElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optElse ::= ELSE OPENB block CLOSEB 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "_E" + myE + ":\t\t\t\t# else\n" + b; myE++; curE++; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*optElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optElseIf ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*optElseIf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optElseIf ::= ELSEIF mainExpr OPENB block CLOSEB optElseIf 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if (!v.type.equals("bool")){throw new CompileException("Elseif takes boolean only"); }
				curE++;
				RESULT = "_E" + myE + ":\t\t\t\t# elseif #" + myE + "\n\t\t"
					+ v.code + "\tblez\t$" + reg + ", _E" + (myE + 1) + "\n" +
					b + "\tj\t_L" + myL + "\n" + ei;
				myE++;
			
              CUP$parser$result = new java_cup.runtime.Symbol(26/*optElseIf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifStmt ::= IF mainExpr OPENB block CLOSEB optElseIf optElse 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if(!v.type.equals("bool")){throw new CompileException("If statement takes boolean only"); }
				RESULT = "\t\t\t\t# if #" + myL + "\n" + v.code + "\tblez\t$" + v.reg + ", _E" + (myE-curE) + "\n"
					+ b + "\tj\t_L" + myL + "\n" +
					ei + e + "_L" + myL + ":\n";
				myL++;
				curE=0;
			
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ifStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // whileLoop ::= WHILE mainExpr OPENB block CLOSEB 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(!v.type.equals("bool")){throw new CompileException("While statement takes boolean only"); }
				RESULT = "_E" + myE + ":\t\t\t\t# while\n"
					+ v.code + "\tblez\t$" + v.reg + ", _L" + myL + "\n"
					+ b + "\tj\t_E" + myE + "\n_L" + myL + ":\t\t\t\t# while end\n";
				myL++;
				myE++;
			
              CUP$parser$result = new java_cup.runtime.Symbol(17/*whileLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // passParam ::= valueExpr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				arrayList.add(v);
System.out.println("passparam addr = " + v.address);
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*passParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // passParams ::= passParam 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*passParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // passParams ::= passParams COMMA passParam 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*passParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // passParamsOpt ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*passParamsOpt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // passParamsOpt ::= passParams 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*passParamsOpt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procCall ::= ID NT$1 OPENP passParamsOpt CLOSEP 
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = "";
				int x;
				VarTable varTable;
				Var var;
				Expr temp;
				if (id.equals("main")){ throw new CompileException("Can't call main()."); }
				if (!currProc.equals(id)) {
					procIndex=1;
					lastProc = currProc;
					currProc = id;
					varTable = (VarTable)(tables.get(currProc));
					if (varTable.num != arrayList.size()) {
						throw new CompileException("Wrong number of parameters");
					}
					for (int i=0; i<arrayList.size(); i++) { // copy parameters into table
						var = (Var)(varTable.arrayList.get(i+1));
						temp = (Expr)(arrayList.get(i));
						if (!var.type.equals(temp.type)){ 
							throw new CompileException("Type mismatch. Expected '" + var.type + "' but found '" + temp.type + "'");
						}
						if (var.ref) {
							var.address = temp.address;
						}
						else {
							RESULT = temp.code + "\tsw\t$" + temp.reg + ", " + var.address + "($30)\t# save parameter\n";
						}
					}	
					//x = 4*++offset;
					/*RESULT += "\taddi\t$30, $30, -" + x + "\n"
						+ "\tjal\t" + currProc + "\n"
						+ "\taddi\t$30, $30, " + x + "\n";*/
					RESULT += "\tjal\t" + currProc + "\n";
				}
				else { // recursion
					if (procIndex==1) { recStart = currProc; }
					currProc = "_" + procIndex + id;
					lastProc = currProc;
					tables.put(currProc, new VarTable(-4*++offset));

					VarTable oldVarTable = tables.get(recStart);
					ArrayList oldList = oldVarTable.arrayList;

					varTable = (VarTable)(tables.get(currProc));

					ArrayList newList = varTable.arrayList;

					for (int i=0; i<oldVarTable.num; i++) {
						newList.add(oldList.get(i+1));
					}
                                        if (oldVarTable.num != arrayList.size()) {
                                                throw new CompileException("Wrong number of parameters");
                                        }
                                        for (int i=0; i<arrayList.size(); i++) { // copy parameters into table
                                                var = (Var)(varTable.arrayList.get(i+1));
                                                temp = (Expr)(arrayList.get(i));
                                                if (!var.type.equals(temp.type)){
                                                        throw new CompileException("Type mismatch. Expected '" + var.type + "' but found '" + temp.type + "'");
                                                }
                                                if (var.ref) {
System.out.println("temp.address = " + temp.address);
                                                        var.address = temp.address;
System.out.println("var.address = " + var.address);
Var me = (Var)(varTable.arrayList.get(i+1));
System.out.println("id = " + me.varName + " me.address = " + me.address);
                                                }
                                                else {
                                                        RESULT = temp.code + "\tsw\t$" + temp.reg + ", " + var.address + "($30)\t# save parameter\n";
                                                }
                                        }
					RESULT = "\tjal\t" + recStart + "\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(24/*procCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

				arrayList = new ArrayList();
			
              CUP$parser$result = new java_cup.runtime.Symbol(33/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // returnStmt ::= RETURN 
            {
              String RESULT = null;
		
                        	VarTable varTable = (VarTable)(tables.get(currProc));
                                Var var = varTable.getVar("_");
                                int x = var.address;
                                RESULT = "\tlw\t$31, " + x + "($30)\n"
                                        + "\tjr\t$31\t# return\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(16/*returnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= variableExpr ASSIGN mainExpr 
            {
              String RESULT = null;
		int varEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var varE = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr valueE = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				if (valueE.type.equals(varE.getType())) {
					RESULT = valueE.code + "\tsw\t$" + reg + ", " + varE.getAddress() + "($30)\t# saving variable\n";
				}
				else { throw new CompileException("Type mismatch"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // input ::= IN INSIGN variableExpr 
            {
              String RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if (var.getType().equals("char")) {
					RESULT = "\ttrap\t102\t\t# read char\n\tsw $2, " + var.getAddress() + "($30)\n";
				}
				else if (var.getType().equals("int")) {
					RESULT = "\ttrap\t5\t\t# read int\n\tsw $2, " + var.getAddress() + "($30)\n";
				}
				else{ throw new CompileException("Can't read booleans"); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(19/*input*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // output ::= OUT OUTSIGN mainExpr 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
				if (v.type.equals("char")) {
					RESULT = v.code + "\tadd\t$4, $" + reg + ", $0\t# printing char\n" +
					"\ttrap\t101\n";
				}
				else if (v.type.equals("int")) {
					RESULT = v.code + "\tadd\t$4, $" + reg + ", $0\t# printing int\n" + 
					"\ttrap\t1\n";
				}
                                else if (v.type.equals("bool")) {
                                       	RESULT = v.code
						+ "\tbne\t$0, $1, _E" + myE + "\t# if 'true', skip\n" 
						+ "\taddi\t$4, $0, 102\t# print 'f'\n\ttrap\t101\t\t\t\n" 
						+ "\taddi\t$4, $0, 97\t# print 'a'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 108\t# print 'l'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 115\t# print 's'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 101\t# print 'e'\n\ttrap\t101\t\t\t\n"
						+ "\tj\t_L" + myL + "\n_E" + myE + ":\n"
						+ "\taddi\t$4, $0, 116\t# print 't'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 114\t# print 'r'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 117\t# print 'u'\n\ttrap\t101\t\t\t\n"
						+ "\taddi\t$4, $0, 101\t# print 'e'\n\ttrap\t101\t\t\t\n"
						+ "_L" + myL + ":\n";
					myL++;
					myE++;
                                }
				else { throw new CompileException("Printing to stdout error."); }
			
              CUP$parser$result = new java_cup.runtime.Symbol(20/*output*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= ifStmt 
            {
              String RESULT = null;
		int ifstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ifstmt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = ifstmt;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= whileLoop 
            {
              String RESULT = null;
		int whilestuffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int whilestuffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String whilestuff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = whilestuff;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= procCall 
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = pc;
				currProc = lastProc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= returnStmt 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = r;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= assignment 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = a;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= input 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = i;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= output 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = s;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= stmt SEMI 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = s;
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block ::= block stmt SEMI 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = b + s;
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varList ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ArrayList aList = new ArrayList();
				aList.add(id);
				RESULT = aList;
			
              CUP$parser$result = new java_cup.runtime.Symbol(30/*varList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varList ::= varList COMMA ID 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				list.add(id);
				RESULT = list; 
			
              CUP$parser$result = new java_cup.runtime.Symbol(30/*varList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // varDecl ::= ID varList 
            {
              Hashtable RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				Var var;
				String s;
				for (int i=0; i<v.size(); i++) {
					s = (String)(v.get(i));
					var = new Var(s, id, (++offset)*-4, false);
					varTable.addVar(s, var);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(12/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varDecl ::= TYPE varList 
            {
              Hashtable RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				Var var;
				String s;
				for (int i=0; i<v.size(); i++) {
					s = (String)(v.get(i));
					var = new Var(s, t, (++offset)*-4, false); 
					if (!varTable.containsKey(s)) { varTable.addVar(s, var); }
					else { throw new CompileException("Variable '" + s + "' has already been declared"); }
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(12/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // varDecls ::= 
            {
              Hashtable RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*varDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varDecls ::= varDecls varDecl SEMI 
            {
              Hashtable RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Hashtable vars = (Hashtable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Hashtable var = (Hashtable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*varDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= ID AMPERSAND ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= TYPE AMPERSAND ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                                VarTable varTable = (VarTable)(tables.get(currProc));
                                ArrayList paramList = varTable.arrayList;
                                Var var = new Var(id, t, -4*++offset, true);
				paramList.add(var);
                        
              CUP$parser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= ID ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= TYPE ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				ArrayList paramList = varTable.arrayList;
				int x = -4*++offset;
				Var var = new Var(id, t, x, false);
				paramList.add(var);
			
              CUP$parser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramList ::= param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*paramList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramList ::= paramList COMMA param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*paramList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramListOpt ::= 
            {
              Object RESULT = null;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				varTable.num = 0;
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*paramListOpt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramListOpt ::= paramList 
            {
              Object RESULT = null;
		
				VarTable varTable = (VarTable)(tables.get(currProc));
				varTable.num = varTable.arrayList.size()-1; // don't count '_'
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*paramListOpt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure ::= ID NT$0 OPENP paramListOpt CLOSEP OPENB varDecls block CLOSEB 
            {
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Hashtable v = (Hashtable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				if (tables.contains(id)) {
					throw new CompileException("Procedure '" + id + "' has already been declared");
				}
				if (id.equals("main")) {
					RESULT = ".globl main\nmain:\n" + b + "\ttrap\t10\t\t# Quit\n";
				}
				else {
					VarTable varTable = (VarTable)(tables.get(id));
					Var var = varTable.getVar("_");
					int x = var.address;
					RESULT = id + ":\n"
					+ "\tsw\t$31, " + x + "($30)\n"
					+ b
					+ "\tlw\t$31, " + x + "($30)\n"
					+ "\tjr\t$31\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*procedure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

				currProc = id;
                                tables.put(currProc, new VarTable(-4*++offset));
			
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedures ::= procedure 
            {
              String RESULT = null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = proc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*procedures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedures ::= procedures procedure 
            {
              String RESULT = null;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String procs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = procs + proc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*procedures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldDef ::= STRUCT OPENB fieldDefs CLOSEB ID SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*fieldDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldDef ::= ID ID SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*fieldDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldDef ::= TYPE ID SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*fieldDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldDefs ::= fieldDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*fieldDefs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldDefs ::= fieldDefs fieldDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*fieldDefs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // structure ::= STRUCT ID OPENB fieldDefs CLOSEB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // structures ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*structures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // structures ::= structures structure 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*structures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SL ::= structures procedures 
            {
              String RESULT = null;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String procs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
				if(!tables.containsKey("main")){ throw new CompileException("No main() procedure.");}
				RESULT = procs;
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*SL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= SL 
            {
              String RESULT = null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String prog = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = prog;
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Start*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

